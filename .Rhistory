library(stringr)
year <-
str_extract(
twDate,
regex_pattern)
KC_date<-c("康熙23年5月6日")
target_regex<-"[0-9]+"
regex_pattern<-glue("(?<=`康熙`{target_regex}(?=`年`)")
print(regex_pattern)
library(stringr)
year <-
str_extract(
KC_date,
regex_pattern)
KC_date<-c("康熙23年5月6日")
target_regex<-"[0-9]+"
regex_pattern<-glue("(?<=`康熙`{target_regex}(?=`年`)")
print(regex_pattern)
library(stringr)
year <- str_extract(KC_date,regex_pattern)
KC_date<-c("康熙23年5月6日")
regex_pattern<-glue("(?<=`康熙`[0-9]+(?=`年`)")
print(regex_pattern)
library(stringr)
year <- str_extract(KC_date,regex_pattern)
KC_date<-c("康熙23年5月6日")
regex_pattern<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
print(regex_pattern)
library(stringr)
year <- str_extract(KC_date,regex_pattern)
KC_date<-c("康熙23年5月6日")
regex_pattern<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
print(regex_pattern)
library(stringr)
year <- str_extract(KC_date,regex_pattern)
western_year<-as.integer(year)+1662
str_replace(KC_date,regex_pattern,as.character(western_year))->KC_date_reformat
print(KC_date_reformat)
lubridate::ymd(KC_date_reformat)
print(KC_date_reformat)
KC_date<-c("康熙23年5月6日")
regex_pattern<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
print(regex_pattern)
library(stringr)
year1 <- str_extract(KC_date,regex_pattern)
western_year<-as.integer(year1)+1662
str_replace(KC_date,regex_pattern,as.character(western_year))->KC_date_reformat
print(KC_date_reformat)
lubridate::ymd(KC_date_reformat)
print(KC_date_reformat)
KC_date<-c("康熙23年5月6日")
regex_pattern<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
library(stringr)
year1 <- str_extract(KC_date,regex_pattern)
year1
western_year<-as.integer(year1)+1662
str_replace(KC_date,regex_pattern,as.character(western_year))->KC_date_reformat
print(KC_date_reformat)
lubridate::ymd(KC_date_reformat)
print(KC_date_reformat)
KC_date<-c("康熙23年5月6日")
regex_pattern<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
library(stringr)
year1 <- str_extract(KC_date,regex_pattern)
year1
western_year<-as.integer(year1)+1662
str_replace(KC_date,regex_pattern,as.character(western_year))->KC_date_reformat
print(KC_date_reformat)
lubridate::ymd(KC_date_reformat)
print(KC_date_reformat)
KC_date<-c("康熙23年5月6日")
regex_pattern<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
library(stringr)
year1 <- str_extract(KC_date,regex_pattern)
year1
western_year<-as.integer(year1)+1662
western_yea
KC_date<-c("康熙23年5月6日")
regex_pattern<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
library(stringr)
year1 <- str_extract(KC_date,regex_pattern)
year1
western_year<-as.integer(year1)+1662
western_year
str_replace(KC_date,regex_pattern,as.character(western_year))->KC_date_reformat
print(KC_date_reformat)
lubridate::ymd(KC_date_reformat)
print(KC_date_reformat)
KC_date<-c("康熙23年5月6日")
regex_pattern1<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
library(stringr)
year1 <- str_extract(KC_date,regex_pattern1)
year1
western_year<-as.integer(year1)+1662
western_year
str_replace(KC_date,regex_pattern,as.character(western_year))->KC_date_reformat
print(KC_date_reformat)
lubridate::ymd(KC_date_reformat)
print(KC_date_reformat)
knitr::opts_chunk$set(echo = TRUE)
KC_date<-c("康熙23年5月6日")
regex_pattern1<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
library(stringr)
library(glue)
KC_date<-c("康熙23年5月6日")
regex_pattern1<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
library(stringr)
year1 <- str_extract(KC_date,regex_pattern1
)
year1
western_year<-as.integer(year1)+1662
western_year
str_replace(KC_date,regex_pattern,as.character(western_year))->KC_date_reformat
print(KC_date_reformat)
lubridate::ymd(KC_date_reformat)
print(KC_date_reformat)
library(stringr)
library(glue)
KC_date<-"康熙23年5月6日"
regex_pattern<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
year<- str_extract(KC_date,regex_pattern)
western_year<-as.integer(year)+1639
str_replace(KC_date,regex_pattern,as.character(western_year))->new_date
lubridate::ymd(new_date)
KC_date<-"康熙23年5月6日"
regex_pattern<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
year<- str_extract(KC_date,regex_pattern)
western_year<-as.integer(year)+1639
str_replace(KC_date,regex_pattern,as.character(western_year))->new_date
lubridate::ymd(new_date)
new_date
KC_date<-"康熙23年5月6日"
regex_pattern<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
year<- str_extract(KC_date,regex_pattern)
western_year<-as.integer(year)+1639
str_replace(KC_date,regex_pattern,as.character(western_year))->new_date
lubridate::ymd(new_date)
new_date
KC_date<-"康熙23年5月6日"
regex_pattern1<-glue("(?<=`康熙`)[0-9]+(?=`年`)")
year1<- str_extract(KC_date,regex_pattern1)
western_year1<-as.integer(year1)+1639
str_replace(KC_date,regex_pattern1,as.character(western_year1))->new_date1
lubridate::ymd(new_date1)
new_date1
oldDate <- "康熙23年5月6日"
regex_pattern <- "(?<=康熙)[0-9]+(?=年)"
year <- str_extract(oldDate, regex_pattern)
western_year <- as.integer(year) + 1639
newDate <- str_replace(oldDate, regex_pattern, as.character(western_year))
lubridate::ymd(newDate)
KC_date<-"康熙23年5月6日"
regex_pattern1<-"(?<=`康熙`)[0-9]+(?=`年`)"
year1<- str_extract(KC_date,regex_pattern1)
western_year1<-as.integer(year1)+1639
str_replace(KC_date,regex_pattern1,as.character(western_year1))->new_date1
lubridate::ymd(new_date1)
oldDate <- "康熙23年5月6日"
regex_pattern <- "(?<=康熙)[0-9]+(?=年)"
year <- str_extract(oldDate, regex_pattern)
western_year <- as.integer(year) + 1639
newDate <- str_replace(oldDate, regex_pattern, as.character(western_year))
lubridate::ymd(newDate)
KC_date<-"康熙23年5月6日"
regex_pattern1<-"(?<=康熙)[0-9]+(?=年)"
year1<- str_extract(KC_date,regex_pattern1)
western_year1<-as.integer(year1)+1639
str_replace(KC_date,regex_pattern1,as.character(western_year1))->new_date1
lubridate::ymd(new_date1)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
# back_regex
back_regex<-str_extract_all(twoNames,"段[^弟]")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract_all(twoNames,"段[^弟]")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract_all(twoNames,"段[^弟]")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,"[段兄]")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,"段兄")
back_regex
# back_regex
back_regex<-str_extract(twoNames,"段兄")
back_regex
paste0("段(兄|兄弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract(twoNames,"段兄|弟")
back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
# back_regex
back_regex<-str_extract(twoNames,"段兄|弟")
back_regex
# back_regex
back_regex<-str_extract(twoNames,"(段兄|弟)")
back_regex
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
# context_picked
str(semiGodsSemiDevils)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
# context_picked
str(semiGodsSemiDevils)
pick_p2<-str_detect(semiGodsSemiDevils$data,p2)
# context_picked
pick_p2<-str_detect(semiGodsSemiDevils$data,"p2")
pick_p2
# context_picked
str(semiGodsSemiDevils)
# context_picked
print(semiGodsSemiDevils$data[c("section","text")])
# context_picked
str(semiGodsSemiDevils)
# context_picked
str(semiGodsSemiDevils)
print(semiGodsSemiDevils$data)
# context_picked
str_detect(semiGodsSemiDevils$data,p2)
# context_picked
str_detect(semiGodsSemiDevils$data,"p2")
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
# context_picked
str_detect(semiGodsSemiDevils$data,"p2")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
# back_regex
back_regex<-str_extract(twoNames,"(段兄|弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-paste0(twoNames,"後面鄰居不能有弟")
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract(twoNames,"段兄^[弟]")
back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
# back_regex
back_regex<-str_extract(twoNames,"段兄^[弟]")
back_regex
# back_regex
back_regex<-twoNames("段兄(?!弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
# back_regex
back_regex<-twoNames("段兄(?!弟)")
# back_regex
back_regex<-str_extract_all(twoNames,("段兄(?!弟)"))
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
# back_regex
back_regex<-str_extract_all(twoNames,("段兄(?!弟)"))
back_regex
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
# context_picked
semiGodsSemiDevils$data[2]
# context_picked
semiGodsSemiDevils$data
# context_picked
semiGodsSemiDevils$data[2]
# context_picked
semiGodsSemiDevils$data
# context_picked
semiGodsSemiDevils$data->a
a
# back_regex
back_regex<-"段兄(?!弟)"
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-段兄(?!弟)
# back_regex
back_regex<-str_extract_all(twoNames,段兄(?!弟))
# back_regex
back_regex<-str_extract_all(twoNames,"段兄(?!弟)")
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_view_all(twoNames,"段兄?!弟")
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract_all(twoNames,"段兄?!弟")
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract_all(twoNames,"段(兄?!弟)")
back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
# back_regex
back_regex<-str_extract_all(twoNames,"段(兄?!弟)")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,"段(兄弟|弟)")
back_regex
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
# back_regex
back_regex<-str_extract_all(twoNames,"段(兄弟|弟)")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,"段(兄弟|兄)")
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract_all(twoNames,"段(兄|兄弟)")
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract_all(twoNames,"段(兄)")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,"(段兄?!弟)")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,"[段兄?!弟]")
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract_all(twoNames,"[段兄弟]")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,"^段兄弟")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,[^段兄弟])
# back_regex
back_regex<-str_extract_all(twoNames,"[^段兄弟]")
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract_all(twoNames,"[段兄弟]")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,"段(兄?!弟)")
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex<-str_extract_all(twoNames,"段(兄?=弟)")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,"段(兄弟)")
back_regex
# back_regex
back_regex<-str_extract_all(twoNames,"段兄(?!弟)")
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
str_extract_all(twoNames,"段兄(?!弟)")
# back_regex
str_extract_all(twoNames,"段兄(?!弟)")
# back_regex
str_extract_all(twoNames,"段兄(?!弟)")->back_regex
back_regex
# back_regex
"段兄(?!弟)"->back_regex
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
str_extract_all(twoNames,"段兄(?!弟)")->back_regex
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
# context_picked
str(semiGodsSemiDevils)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
# back_regex
back_regex="(?!)"
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄弟|兄)")
# back_regex
back_regex="(?!)"
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# back_regex
back_regex="(?!弟)"
back_regex
pattern <- paste0("段(兄弟|兄)",back_regex)
str_extract_all(twoNames, pattern)
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[[1]]
# context_picked
str(semiGodsSemiDevils)
semiGodsSemiDevils$data[[1]]->l
l
# context_picked
semiGodsSemiDevils$data[[1]]$section="p2"->pick_p2
pick_p2
# context_picked
semiGodsSemiDevils$data[[1]]$section=p2->pick_p2
# context_picked
semiGodsSemiDevils$data[[1]]$section="p2"->pick_p2
# context_picked
str_detect(semiGodsSemiDevils$data[[1]]$section,"p2")->pick_p2
pick_p2
# context_picked
str_detect(semiGodsSemiDevils$data[[1]]$section,"p2")->pick_p2
pick_p2
# context_picked
str_detect(semiGodsSemiDevils$data[[1]]$section,"p2")->pick_p2
# context_picked
str_detect(semiGodsSemiDevils$data[[1]]$section,"p2")->pick_p2
context_picked<-semiGodsSemiDevils$data[[1]]$text[pick_p2]
context_picked
# context_picked
print(semiGodsSemiDevils$data[[1]]$section)
str_detect(semiGodsSemiDevils$data[[1]]$section,"p2")->pick_p2
context_picked<-semiGodsSemiDevils$data[[1]]$text[pick_p2]
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
# context_picked
print(semiGodsSemiDevils$data[[1]]$section)
str_detect(semiGodsSemiDevils$data[[1]]$section,"p2")->pick_p2
context_picked<-semiGodsSemiDevils$data[[1]]$text[pick_p2]
# context_picked
print(semiGodsSemiDevils$data[[1]]$section)
str_detect(semiGodsSemiDevils$data[[1]]$section,"p2")->pick_p2
context_picked<-semiGodsSemiDevils$data[[1]]$text[pick_p2]
context_picked
# context_picked
print(semiGodsSemiDevils$data[[1]]$section)
str_detect(semiGodsSemiDevils$data[[1]]$section,"p2")->pick_p2
pick_p2
# context_picked
print(semiGodsSemiDevils$data[[1]]$section)
str_detect(semiGodsSemiDevils$data[[1]]$section,"P2")->pick_p2
pick_p2
# context_picked
print(semiGodsSemiDevils$data[[1]]$section)
str_detect(semiGodsSemiDevils$data[[1]]$section,"P2")->pick_p2
pick_p2
context_picked<-semiGodsSemiDevils$data[[1]]$text[pick_p2]
context_picked
# context_picked_split
context_picked_split<-str_split(context_picked,"\\s",n=2)
# context_picked_split
context_picked_split<-str_split(context_picked,"\\s",n=2)
str(context_picked_split)
context_picked_split
# context_picked_split
context_picked_split<-str_split(context_picked,"\\s",n=214)
str(context_picked_split)
context_picked_split
# context_picked_split
context_picked_split<-str_split(context_picked,"\\s",n=214)
str(context_picked_split)
# mention_duan
str_extract_all(context_picked_split[2],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")->mention_duan
mention_duan
# mention_duan
str_extract_all(context_picked_split,"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")->mention_duan
mention_duan
# table_duan
unlist(mention_duan)->mention_duan
table(mention_duan)->table_duan
table_duan
