install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
knitr::opts_chunk$set(echo = TRUE)
if(!require(lubridate)){install.packages("lubridate")}
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
convert_TaiwanDate2WesternDate <- function(twDate){
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
twDate <-  c("民國108年12月5日","民國98年10月5日")
convert_TaiwanDate2WesternDate(twDate)
convert_TaiwanDate2WesternDate <- function(twDate){
library(stringr)
if(!require(lubridate)){install.packages("lubridate")}
if(!require(stringr)){install.packages("stringr")}
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
twDate <-  c("民國108年12月5日","民國98年10月5日")
convert_TaiwanDate2WesternDate(twDate)
check_package<- function(p){installs<-if(require(!p)){install.packages("p")}}
# 測試
check_package("clipr")
check_package("SOAR")
check_package<- function(p){installs<-if(require(!p)){install.packages(p)}}
# 測試
check_package("clipr")
check_package("SOAR")
{installs<-if(require(!p)){install.packages(p)}}
check_package<- function(p){installs<-if(!require(!p)){install.packages(p)}}
# 測試
check_package("clipr")
check_package<- function(pkgName){installs<-if(!require(pkgName)){install.packages(pkgName)}}
# 測試
check_package("clipr")
check_package("SOAR")
n=15
if(n%%2=1){
n=15
if(n%%2==1){
fvalue<-n+1/2
} else{fvalue<-n/2}
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
n=15
if((n%%2)==1){
fvalue<-n+1/2
} else{fvalue<-n/2}
n=15
if((n%%2)==1){
fvalue<-n+1/2
} else{fvalue<-n/2}
n<-15
if((n%%2)==1){
fvalue<-n+1/2
} else{fvalue<-n/2}
n<-15
if((n%%2)==1){
fvalue<- -(n+1)/2
} else{fvalue<-n/2}
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
student_i_section=="56"
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly(examSubmissionTime$section[[2]],examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]],examSubmissionTime$time[[3]])
studentSequence <- 1:length(examSubmissionTime$section)
install.packages("purrr")
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
readline("請輸入你的成績（整數）： ") -> grade # 單獨執行
readline("請輸入你的成績（整數）： ") -> grade # 單獨執行
if(grade >=90){
print("優")
} else if(grade>=80 & grade<=89){
print("良")
} else if(grade>=70 & grade<=79){
print("尚可")
} else {
print("待加強")
}
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/8wgdef4v44k1w0g/tpe_highSchools.json?dl=1") -> tpe_highSchools
tpe_highSchools <- factor(tpe_highSchools)
levels(tpe_highSchools)
tpe_highSchools <- factor(
tpe_highSchools, levels=c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
)
# tpe_highSchools
tpe_highSchools
str(tpe_highSchools)
length(tpe_highSchools)
length(tpe_highSchools)
levels(tpe_highSchools)<-c( levels(tpe_highSchools),"北一女")
tpe_highSchools[c(680:689)]<- "北一女"
levels(tpe_highSchools)
regex_hs1st <- "[臺台]?北市?立?第?一女子?高?級?中?學?"
# regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <-
"[高級中學]+$"
# regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
View(data228)
str(data228)
data228$`檔號`[[1]]
str_split(data228,"/",n=2) -> split_code
str_split(data228,"/") -> split_code
split_code[[1]]
split_code[[1]]
str(data228)
data228$`檔號`[[1]]
data228$`檔號`%>% str_split("/")-> split_code
split_code[[1]]
split_code[[2]]
split_code[[2]][[1]]
map(split_code,~.x[[1]])-> list_doc
unlist(list_doc)
factor(unlist(list_doc))-> data228$`全宗名`
unlist(list_doc)->list_doc
factor(list_doc)->list_doc
data228$檔號 %>%
str_split("/") -> split_docCode
map(split_docCode, ~.x[[1]]) %>%
unlist() %>%
factor() -> data228$全宗名編號
map(split_docCode, ~.x[[2]]) %>%
unlist() %>%
as.integer()-> data228$年
# data228[c("全宗名編號","年")]
data228$`附註`=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"-> pick_doc
data228$`檔號`[pick_doc]-> doc_num
unique(doc_num)
unique(doc_num)-> doc_num
(data228$附註=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊") ->
pick_document
data228$檔號[pick_document] %>%
unique() ->
doc_number
(data228$檔號==doc_number) ->
pick_document
data228$個人名稱[pick_document] %>%
unique() -> victims
# victims
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
View(courseStructure)
View(courseStructure)
str_extract_all(courseStructure$`應修系級`,"[\u4E00-\u9FFF]+系[司法學財經組]?[0-9]")->a
unlist(a)
courseStructure$應修系級 %>%
str_extract_all(
"[^、]+系[司法學財經組]*[1-9]"
) %>%
unlist() %>%
unique() -> majorGradeCombos
# majorGradeCombos
str_extract_all(courseStructure$`應修系級`,"[\u4E00-\u9FFF]+系[司法學財經組]?[0-9]")->a
unlist(a)->a
unique(a)->majorgradecombos
str_extract_all(courseStructure$`應修系級`,"[\u4E00-\u9FFF]+系[司法學財經組]?[0-9]")->a
unlist(a)->a
unique(a)->majorgradecombos
courseStructure$應修系級 %>%
str_extract_all(
"[^、]+系[司法學財經組]*[1-9]"
) %>%
unlist() %>%
unique() -> majorGradeCombos
# majorGradeCombos
str_extract_all(courseStructure$`應修系級`,"[\u4E00-\u9FFF]+系[司法學財經組]*[0-9]")->a
unlist(a)->a
unique(a)->majorgradecombos
(courseStructure$學年 == "103" &
str_detect(courseStructure$應修系級, "經濟系3")
) -> pick_courses
courseStructure$科目名稱[pick_courses] %>%
unique() -> econ101junior
# econ101junior
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr)
source("https://www.dropbox.com/s/tv16xt8mv11cli7/gujarati.R?dl=1")
print(receipts300[1:30]) # 印前30張
print(numerals_Gujarati)
# 此題其實不用設levels，Gujarati語的字碼排序剛好和它的1-9相同（只要同學有將receipts300轉成factor細心點就會注意到, 所以也可以：
factor_receipts300 <- factor(receipts300)
sum300 <- sum(as.integer(factor_receipts300))
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
poem_song[poem_songOrder] -> poem_song
# poem_song
View(poem_song)
length(poem_song)
poem_song[[136]] <-
list(
author=poem_new$`作者`,
paragraphs=poem_new$`詩文`,
title=poem_new$`主題`,
id=poem_new$id
)
# poem_song
poem_song[[22]]
install.packages("rvest")
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
str(post)
post$category <- post$category_dateTime[[1]]
post$category <- post$category_dateTime[[1]]
str(post$comments$hearts[[26]])
paste0("2020年",post$comments$DateTime) -> datetime
ymd_hm(datetime, tz="Asia/Taipei") -> post$comments$DateTime
post$comments$DateTime
# post
post$comments$gender[[26]] <- "男"
post$comments$DateTime[[26]] <- with_tz(ymd_hm("2020-04-25 15:50",tz="Europe/Warsaw"),tzone="Asia/Taipei")
post$comments$content[[26]] <- "心不在課堂上，在哪都做得到遠距。"
post$comments$hearts[[26]] <- 0L
str(post$comments$hearts[[26]])
# post
str(post$comments$hearts[[26]])
str(post$comments$hearts[[26]])
post$category <- post$category_dateTime[[1]]
post$dateTime <- ymd_hm(paste0("2020年",post$category_dateTime[[2]]),tz="Asia/Taipei")
post$category_dateTime <- NULL
post[c(1,2,3,5,6,4)] -> post1
str(post1)
# post
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
# surface_A
surface_A <- 2*(20*15+20*10+1*15)
# surface_A
surface_A <- as.factor(2*(20*15+20*10+1*15))
# surface_A
surface_A <- 2*(20*15+20*10+1*15)
# surface_A
surface_A <- levels(2*(20*15+20*10+1*15))
# surface_A
surface_A <- 2*(20*15+20*10+1*15)
# surface_cube
surface_cube<- function(l,w,h){
surface<- 2*(l*w+w*h+l*h)
return(surface)
}
surface_cube(20,15,10)
# surface_A
surface_A <- 2*(20*15+20*10+1*15)
surface_A
surface_cube(20,15,10)
surface_cube(20,10,15)
# surface_cube
surface_cube<- function(l,w,h){
surface<- 2*(l*w +l*h+ w*h)
return(surface)
}
surface_cube(20,10,15)
surface_cube(20,10,10)
# surface_cube
surface_cube<- function(l,w,h){
surface<- 2* (l*w+l*h+w*h)
return(surface)
}
surface_cube(20,10,10)
# surface_cube
surface_cube<- function(l,w,h){
surface<- 2* (l*w+l*h+w*h)
return(surface)
}
surface_cube(20,10,15)
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
# surface_A
surface_A <- 2*(20*15+20*10+10*15)
surface_A
# surface_cube
surface_cube<- function(l,w,h){
surface<- 2* (l*w+l*h+w*h)
return(surface)
}
surface_cube(20,10,15)
surface_cube
# surface_cube
surface_cube<- function(l,w,h){
surface<- 2*(l*w+l*h+w*h)
return(surface)
}
surface_cube(20,10,15)
surface_cube
View(Mask)
# `1st_odd_or_even`
Mask[[1]] -> mask_1st
# `1st_odd_or_even`
Mask$身分證字號[[1]] -> mask_1st
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
rm(n)
knitr::opts_chunk$set(echo = TRUE)
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
# `1st_odd_or_even`
Mask$`身分證字號`[[1]] -> mask_1st
if(as.logical(mask_1st %% 2)){1} else{2} -> `1st_odd_or_even`
mask_1st %%2
str_detect(mask_1st,"[0-9]") -> mask_1st
str_extract(mask_1st,"[0-9]") -> mask_1st
str_extract(mask_1st,"![A-Z]") -> mask_1st
str_extract(mask_1st,"![A-Z]") -> mask_1st
# `1st_odd_or_even`
Mask$`身分證字號`[[1]] -> mask_1st
str_extract(mask_1st,"![A-Z]") -> mask_1st
# `1st_odd_or_even`
Mask$`身分證字號`[[1]] -> mask_1st
Ids <- c("A283743192", "B829103720", "A10920402", "C291022384")
str_extract(Ids, "[A-Z]")  # 取出 A-Z的字元
str_extract(mask_1st,"[0-9]+") -> mask_1st
if(as.logical(mask_1st %% 2)){1} else{2} -> `1st_odd_or_even`
if(as.logical(mask_1st %% 2)){1} else{2} -> `1st_odd_or_even`
as.integer(str_extract(mask_1st,"[0-9]+") )-> mask_1st
if(as.logical(mask_1st %% 2)){1} else{2} -> `1st_odd_or_even`
# `1st_odd_or_even`
Mask$`身分證字號`[[1]] -> mask_1st
as.integer(str_extract(mask_1st,"[0-9]+") )-> mask_1st
if(as.logical(mask_1st %% 2)){1} else{2} -> `1st_odd_or_even`
`1st_odd_or_even`
rm(Ids)
rm(n)
rm(fvalue)
rm(myFun())
rm(myFun)
# odd_or_even
odd_or_even<- function(k){
as.integer(str_extract(k,"[0-9]+") )-> k
if(as.logical(k %% 2)){1} else{2} -> `1st_odd_or_even`
}
odd_or_even(Mask$身分證字號[[1]])
# odd_or_even
odd_or_even<- function(k){
as.integer(str_extract(k,"[0-9]+") )-> k
if(as.logical(k %% 2)){1} else{2} -> `1st_odd_or_even`
return(`1st_odd_or_even`)
}
odd_or_even(Mask$身分證字號[[1]])
# odd_or_even
odd_or_even<- function(k){
as.integer(str_extract(k,"[0-9]+") )-> k
if(as.logical(k %% 2)){1} else{2} -> `num_odd_or_even`
return(`num_odd_or_even`)
}
odd_or_even(Mask$`身分證字號`[[1]])
# odd_or_even
odd_or_even<- function(k){
as.integer(str_extract(k,"[0-9]+") )-> k
if(as.logical(k %% 2)){1} else{2} -> `num_odd_or_even`
return(`num_odd_or_even`)
}
odd_or_even(Mask$`身分證字號`[[1]])
odd_or_even
data.frame(
weekday = str_c("星期",c("天","一","二","三","四","五","六")),
number = c(1:7)
) -> weekday_chart
data.frame(
weekday = str_c("星期",c("天","一","二","三","四","五","六")),
number = c(1:7)
) -> weekday_chart
View(weekday_chart)
View(weekday_chart)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
View(weekday_chart)
View(weekday_chart)
View(courseStructure)
View(courseStructure)
View(courseStructure)
list(
year1=`一年級不重覆科目名稱`（class character）,
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
# surface_A
surface_A <- 2*(20*10)+4*(20*15)
surface_A
