poem_song<-c(poem_songOrder)
str(poem_song)
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
# post
a<-"2020年"
b<-c(post$comments$DateTime)
paste0(a,b)
with_tz(ymd_hm(post$comments$DateTime),tzone = "UTC")
# post
a<-"2020年"
b<-c(post$comments$DateTime)
paste0(a,b)->post$comments$DateTime
with_tz(ymd_hm(post$comments$DateTime),tzone = "UTC")
# post
a<-"2020年"
b<-c(post$comments$DateTime)
paste0(a,b)->post$comments$DateTime
with_tz(ymd_hm(post$comments$DateTime),tzone = "Asia/Taipei")
post
# post
a<-"2020年"
b<-c(post$comments$DateTime)
paste0(a,b)->post$comments$DateTime
with_tz(ymd_hm(post$comments$DateTime),tzone = "Asia/Taipei")
str(post)
# post
as.numeric(post$comments$hearts)->post$comments$hearts
str(post)
post
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
install.packages(rvest)
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
# post
as.numeric(post$comments$hearts)->post$comments$hearts
str(post)
post
# post
a<-"2020年"
b<-c(post$comments$DateTime)
paste0(a,b)->post$comments$DateTime
with_tz(ymd_hm(post$comments$DateTime),tzone = "Asia/Taipei")
str(post)
# post
post$comments$DateTime[[26]]<-with_tz(ymd_hm("2020年4月25日 15:50",tz="Europe/Warsaw"),tzone="Asia/Taipei")
post$comments$hearts[[26]]<-0
# post
post$comments$DateTime[[26]]<-with_tz(ymd_hm("2020年4月25日 15:50",tz="Europe/Poland"),tzone="Asia/Taipei")
# post
post$comments$DateTime[[26]]<-with_tz(ymd_hm("2020年4月25日 15:50",tz="Europe/Warsaw"),tzone="Asia/Taipei")
post$comments$hearts[[26]]<-0
# post
post$comments$DateTime[[26]]<-with_tz(ymd_hm("2020年4月25日 15:50",tz="Europe/Warsaw"),tzone="Asia/Taipei")
post$comments$hearts[[26]]<-0
post$comments$gender[[26]]<-"男"
post$comments$content[[26]]<-"心不在課堂上，在哪都做得到遠距"
post$comments[[26]]
# post
post$comments$DateTime[[26]]<-with_tz(ymd_hm("2020年4月25日 15:50",tz="Europe/Warsaw"),tzone="Asia/Taipei")
post$comments$hearts[[26]]<-0
post$comments$gender[[26]]<-"男"
post$comments$content[[26]]<-"心不在課堂上，在哪都做得到遠距"
post$comments$gender[[26]]
# post
post$comments$DateTime[[26]]<-with_tz(ymd_hm("2020年4月25日 15:50",tz="Europe/Warsaw"),tzone="Asia/Taipei")
post$comments$hearts[[26]]<-0
post$comments$gender[[26]]<-"男"
post$comments$content[[26]]<-"心不在課堂上，在哪都做得到遠距"
post$comments$content[[26]]
# post
post <-list(title=post[[1]],
content=post[[2]],
submitter_gender=post[[3]],
category=paste0(post[[4]])[[1]],
dateTime=paste0(post[[4]])[[2]],
comments=post[[5]]
)
str(post)
# sum300
૧ = 1L
source("https://www.dropbox.com/s/tv16xt8mv11cli7/gujarati.R?dl=1")
print(receipts300[1:30]) # 印前30張
print(numerals_Gujarati)
# sum300
૧ = 1L
# sum300
"૧" = 1L
"૨ "= 2L
"૩" = 3L
"૪" = 4L
"૫"= 5L
"૬" = 6L
"૭" = 7L
"૮" = 8L
"૯ "= 9L
sum(as.integer(as.factor(receipts300))) -> sum300
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
# post
post <-list(title=post$title,
content=post$content,
submitter_gender=post$submitter_gender,
category=paste0(post$category),
dateTime=paste0(post$dateTime),
comments=post$comments
)
post
# poem_song
poem_songOrder
# poem_song
poem_songOrder
poem_song[[1]]
# poem_song
poem_song <-poem_song[poem_songOrder]
poem_song
# poem_song
poem_song <-poem_song[poem_songOrder]
poem_song
knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example[c("name","height")])
pick_above170<-example$height>=170
pick_above170<-example$height>=170
pick_above170
pick_above170<-example$height>=170
pick_above170
example$name[pick_above170]
pick_after98<- example$birthday<=lubridate::ymd("1998-01-01")
pick_after98
pick_after98<- example$birthday<=lubridate::ymd("1998-01-01")
example$name[pick_after98]
pick_after98<- example$birthday>=lubridate::ymd("1998-01-01")
example$name[pick_after98]
example$allowance<-ordered(example$allowance)
pick_allowanceover1000<-example$allowance>="1001-2000"
example$name[pick_allowanceover1000]
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
##各元素調整成正確class
str(list_victimAges_female)
##各元素調整成正確class
str(list_victimAges_female)
levels(list_victimAges_female$年齡層)
##各元素調整成正確class
str(list_victimAges_female)
list_victimAges_female$數目<-as.integer(list_victimAges_female$數目)
list_victimAges_female
##各元素調整成正確class
list_victimAges_female$`數目`<-as.integer(list_victimAges_female$`數目`)
list_victimAges_female$`性別`<-as.factor(list_victimAges_female$`性別`)
str(list_victimAges_female)
str(list_victimAges_female)
View(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`, na.rm=T)
levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
list_victimAges_female$`年齡層`<-ordered(list_victimAges_female$`年齡層`)
levels(list_victimAges_female$年齡層) -> levels_ages
print(levels_ages)
levels_new <- c(levels_ages[c(12,13,1,8,2:7,9:11)])
levels(list_victimAges_female$`年齡層`) <- levels_new
levels_new <- c(levels_ages[c(12,13,1,8,2:7,9:11)])
levels(list_victimAges_female$`年齡層`) <- levels_new
print(list_victimAges_female$`年齡層`)
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
set_department<-transcript100to103$`學院`[c("法學院","商學院")]
pick_fromtranscript<-transcript100to103$`學院` %in% set_department
set_department<-transcript100to103$`學院`[c("法學院","商學院")]
pick_fromtranscript<-transcript100to103$`學院` %in% set_department
set_LawBussiness<-c("法學院","商學院")
transcript100to103$`學院` %in% set_LawBussiness
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
print(example(c("name","hobby")))
print(example[c("name","hobby")])
print(example[c("name","hobby")])
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
install.packages("stringr")
install.packages("stringr")
knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
print(example[c("name","hobby")])
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
print(example[c("name","hobby")])
pick_loveFood <- stringr::str_detect(example$hobby,"美食")
example$name[pick_loveFood]
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
# violatedArticles
violatedArticles<-unique(badEmployers$law)
violatedArticles
# table_countsByArticle
table_countsByArticle<- table(violatedArticles)
# table_countsByArticle
table_countsByArticle<- table(violatedArticles)
table_countsByArticle
# table_countsByArticle
table_countsByArticle<- table(badEmployers$law)
table_countsByArticle
# mostViolatedArticle
class(table_countsByArticle)
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
names(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
str(badEmployers$law)
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
badEmployers$law[[mostViolatedArticle]]
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
badEmployers$law[mostViolatedArticle]
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
max_violatedArticle<-table_countsByArticle>=507
max_violatedArticle
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
max_violatedArticle<-table_countsByArticle>=507
max_violatedArticle
badEmployers$law[[max_violatedArticle]]
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
max_violatedArticle<-table_countsByArticle>=507
max_violatedArticle
badEmployers$law[max_violatedArticle]
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
max_violatedArticle<-table_countsByArticle>=507
max_violatedArticle
badEmployers$law[max_violatedArticle]
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
max_violatedArticle<-table_countsByArticle>=507
max_violatedArticle
table_countsByArticle[max_violatedArticle]
# mostViolatedArticle
mostViolatedArticle<- max(table_countsByArticle)
mostViolatedArticle
max_violatedArticle<-table_countsByArticle>=507
max_violatedArticle
table_countsByArticle[max_violatedArticle]
names(mostViolatedArticle)
# mostViolatedArticle
max_number<- max(table_countsByArticle)
max_number
max_lawname<-table_countsByArticle>=max_number
max_lawname
mostViolatedArticle<-list(max_lawname,max_number)
# mostViolatedArticle
max_number<- max(table_countsByArticle)
max_number
max_lawname<-table_countsByArticle>=max_number
max_lawname
mostViolatedArticle<-list(max_lawname,max_number)
mostViolatedArticle
# mostViolatedArticle
max_number<- max(table_countsByArticle)
max_number
max_lawname<-table_countsByArticle>=max_number
table_countsByArticle[max_lawname]
# mostViolatedArticle
max_number<- max(table_countsByArticle)
max_number
max_lawname<-table_countsByArticle>=max_number
table_countsByArticle[max_lawname]->mostViolatedArticle
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
# mostViolatedArticle
max_number<- max(table_countsByArticle)
max_number
max_lawname<-table_countsByArticle>=max_number
table_countsByArticle[max_lawname]->mostViolatedArticle
names(mostViolatedArticle)
as.integer(mostViolatedArticle)
mostViolatedArticle
# mostViolatedArticle_content
str(badEmployers$lawContent)
# mostViolatedArticle_content
unique_content<- unique(badEmployers$lawContent)
unique_content
# mostViolatedArticle_content
unique_content<- unique(badEmployers$lawContent)
table_content<-table(badEmployers$lawContent)
table_content
# mostViolatedArticle_content
unique_content<- unique(badEmployers$lawContent)
table_content<-table(badEmployers$lawContent)
table_content
max_content<- max(table_content)
max_content
# mostViolatedArticle_content
unique_content<- unique(badEmployers$lawContent)
table_content<-table(badEmployers$lawContent)
table_content
max_content<- max(table_content)
max_content
name_content<-table_content>=max_content
mostViolatedArticle_content<-badEmployers$lawContent[name_content]
mostViolatedArticle_content
# mostViolatedArticle_content
table_content<-table(badEmployers$lawContent)
table_content
max_content<- max(table_content)
# mostViolatedArticle_content
table_content<-table(badEmployers$lawContent)
max_content<- max(table_content)
max_content
# mostViolatedArticle_content
table_content<-table(badEmployers$lawContent)
max_content<- max(table_content)
max_content
a<-table_content>=max_content
mostViolatedArticle_content<-badEmployers$lawContent[a]
mostViolatedArticle_content
# mostViolatedArticle_content
table_content<-table(badEmployers$lawContent)
mostViolatedArticle_content<-table_content[max_lawname]
mostViolatedArticle_content
# mostViolatedArticle_content
table_content<-table(badEmployers$lawContent)
max_content<-max(table_content)
max_content
# mostViolatedArticle_content
table_content<-table(badEmployers$lawContent)
max_content<-max(table_content)
max_content
max_contentname<-table_content>=max_content
mostViolatedArticle_content<-table_content[max_contentname]
mostViolatedArticle_content
# popularSentenceMonth
uni_dt<-unique(badEmployers$dt)
# popularSentenceMonth
uni_dt<-unique(badEmployers$dt)
uni_dt
# popularSentenceMonth
table_dt<-table(badEmployers$dt)
table_dt
# popularSentenceMonth
table_dt<-table(badEmployers$dt)
max_dt<-max(table_dt)
max_dt
# popularSentenceMonth
table_dt<-table(badEmployers$dt)
max_dt<-max(table_dt)
max_dt
table_dt>=max_dt->a
popu_day<-badEmployers$dt[a]
popu_day
# popularSentenceMonth
table_dt<-table(badEmployers$dt)
max_dt<-max(table_dt)
max_dt
# popularSentenceMonth
table_dt<-table(badEmployers$dt)
table_dt
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
# chinese
levels(table$國文)
# chinese
class(table)
# chinese
class(table$級分)
# chinese
class(table$`級分`)
# chinese
table$`國文`<-ordered(table$`國文`)
class(table$`國文`)
# chinese
table$`國文`<-ordered(table$`國文`)
class(table$`國文`)
chinese<-table$`國文`+1
# chinese
table$`國文`<-ordered(table$`國文`)
class(table$`國文`)
chinese<-table$`國文`
# ntpu_namelist
ntpu_namelist<- stringr::str_detect(namelist,"北大")
ntpu_namelist
# ntpu_namelist
ntpu_namelist<- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist
# ntpu_namelist
namelist<- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist<-students10$`志願`[namelist]
ntpu_namelist
# ntpu_namelist
namelist<- stringr::str_detect(students10$`志願`,"北大")
ntpu_namelist<-students10$`姓名`[namelist]
ntpu_namelist
# ntpu_econtpu_eco
students10$`國文`[namelist]>=12 -> rank_1
rank_1
# ntpu_econtpu_eco
students10$`國文`[namelist]>=12 -> rank_1
ntpu_namelist[rank_1]
# ntpu_econtpu_eco
students10$`國文`[namelist]>=12 -> rank_1
ntpu_namelist[rank_1]->passone
passone
# ntpu_econtpu_eco
students10$`國文`[namelist]>=12 -> rank_1
ntpu_namelist[rank_1]->passone
students10$`姓名`
# ntpu_econtpu_eco
students10$`國文`[namelist]>=12 -> rank_1
ntpu_namelist[rank_1]->passone
passone
students10$`姓名`
# ntpu_econtpu_eco
students10$`國文`[namelist]>=12 -> rank_1
ntpu_namelist[rank_1]->passone
passone
students10$`姓名`
student_passone<-students10[c(1,2,5,8,9)]
student_passone
# ntpu_econtpu_eco
students10$`國文`[namelist]>=12 -> rank_1
ntpu_namelist[rank_1]->passone
passone
students10$`姓名`
k<-c(T,T,F,F,T,F,F,T,T,F)
student_passone<-students10[K]
# ntpu_econtpu_eco
students10$`國文`[namelist]>=12 -> rank_1
ntpu_namelist[rank_1]->passone
passone
students10$`姓名`
k<-c(T,T,F,F,T,F,F,T,T,F)
student_passone<-students10[k]
student_passone
# ntpu_econtpu_eco
students10$`國文`[namelist]>=12 -> rank_1
ntpu_namelist[rank_1]->passone
passone
